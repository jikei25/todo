// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo_items.sql

package database

import (
	"context"
	"database/sql"
)

const countTodoItems = `-- name: CountTodoItems :one
SELECT COUNT(*) 
FROM todo_items
`

func (q *Queries) CountTodoItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTodoItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodoItem = `-- name: CreateTodoItem :one
INSERT INTO todo_items (title, description, status, due_date)
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, status, due_date, created_at, updated_at
`

type CreateTodoItemParams struct {
	Title       string
	Description sql.NullString
	Status      NullStatusEnum
	DueDate     sql.NullTime
}

func (q *Queries) CreateTodoItem(ctx context.Context, arg CreateTodoItemParams) (TodoItem, error) {
	row := q.db.QueryRowContext(ctx, createTodoItem,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.DueDate,
	)
	var i TodoItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodoItemByID = `-- name: GetTodoItemByID :one
SELECT id, title, description, status, due_date, created_at, updated_at 
FROM todo_items
WHERE id = $1
`

func (q *Queries) GetTodoItemByID(ctx context.Context, id int32) (TodoItem, error) {
	row := q.db.QueryRowContext(ctx, getTodoItemByID, id)
	var i TodoItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodoItem = `-- name: ListTodoItem :many
SELECT id, title, description, status, due_date, created_at, updated_at 
FROM todo_items
LIMIT $1 OFFSET $2
`

type ListTodoItemParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTodoItem(ctx context.Context, arg ListTodoItemParams) ([]TodoItem, error) {
	rows, err := q.db.QueryContext(ctx, listTodoItem, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoItem
	for rows.Next() {
		var i TodoItem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoItem = `-- name: UpdateTodoItem :exec
UPDATE todo_items
SET status = $1, updated_at = NOW(), title = $2, description = $3, due_date = $4
WHERE id = $5
`

type UpdateTodoItemParams struct {
	Status      NullStatusEnum
	Title       string
	Description sql.NullString
	DueDate     sql.NullTime
	ID          int32
}

func (q *Queries) UpdateTodoItem(ctx context.Context, arg UpdateTodoItemParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoItem,
		arg.Status,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.ID,
	)
	return err
}
